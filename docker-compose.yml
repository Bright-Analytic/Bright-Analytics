version: '3.8'
services:
  # service 1
  redis-service:
    container_name: redis-service
    image: 'redis/redis-stack-server'
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"

  # service n
  pulsar-service:
    container_name: pulsar-service
    image: 'apachepulsar/pulsar:latest'
    ports:
      - "6650:6650"
      - "8080:8080"
    volumes:
      - pulsardata:/pulsar/data
      - pulsarconf:/pulsar/conf
    command: bin/pulsar standalone
    # Optional: Add restart policy
    restart: unless-stopped

  
  # service 2
  rabbitmq-service:
    container_name: rabbitmq-service
    image: 'rabbitmq:4.0-management'
    ports:
      - "15672:15672"

  # service 3
  zookeeper-service:
    container_name: zookeeper-service
    image: 'zookeeper:latest'

  # service 4
  kafka-service:
    container_name: kafka-service
    image: 'apache/kafka:latest'
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper-service:2181
      # - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      # - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      # - KAFKA_NUM_PARTITIONS=3
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-service:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-service:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=3
    depends_on:
      - zookeeper-service
    ports:
      - "9092:9092"

  # main service 1
  analytics-api-service:
    container_name: analytics-api-service
    build:
      context: ./
      dockerfile: dockerfile-analyticsapi
    env_file:
      - ./.env
    depends_on:
      - redis-service
      - rabbitmq-service
    ports:
      - "8003:8003"

  # main service 2
  event-processor-service:
    container_name: event-processor-service
    build:
      context: ./
      dockerfile: dockerfile-eventprocessor
    env_file:
      - ./.env
    depends_on:
      - redis-service
      - rabbitmq-service
      - kafka-service
    # entrypoint: ["./wait-for-it.sh", "rabbitmq-service:5672", "--", "npm", "start"]

  # main service 3
  pageview-api-service:
    container_name: pageview-api-service
    build:
      context: ./
      dockerfile: dockerfile-pageviewapi
    env_file:
      - ./.env
    depends_on:
      - rabbitmq-service
    ports:
      - "8002:8002"

  # main service 4
  queue-worker-service:
    container_name: queue-worker-service
    build:
      context: ./
      dockerfile: dockerfile-queueworker
      args:
        - NEON_DB_URL=${NEON_DB_URL}
    env_file:
      - ./.env
    depends_on:
      - kafka-service
      - rabbitmq-service

  # main service 5
  script-server:
    container_name: script-server
    build:
      context: ./
      dockerfile: dockerfile-script
    env_file:
      - ./.env
    ports:
      - "8001:8001"

volumes:
  redis-data:
  pulsardata:
  pulsarconf: